<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="edu.spring.project.mappers.UserMapper">
	<!-- 로그인 확인! -->
	<select id="loginCheck" resultType="User">
		SELECT ${user.uno}, ${user.userid}, ${user.username},
		${user.useremail}, ${user.birthday}, ${user.graduation},
		${user.bg_photo}, ${user.pf_photo}, ${user.emotion}
		FROM ${tbl_user}
		WHERE ${user.userid} = #{userId} AND ${user.userpwd} = #{userPwd}
	</select>
	
	<!-- 회원 가입시 ID 중복 확인 -->
	<select id="existUserId" resultType="java.lang.Integer">
		SELECT EXISTS(
			SELECT * FROM ${tbl_user}
			WHERE ${user.userid} = #{userId}
		)
		AS isEXIST
	</select>
	
	<!-- 회원 가입시 Email 중복 확인 -->
	<select id="existUserEmail" resultType="java.lang.Integer">
		SELECT EXISTS(
			SELECT * FROM ${tbl_user}
			WHERE ${user.useremail} = #{userEmail}
		)
		AS isEXIST
	</select>
	
	<!-- 내가 설정했던 감정 가져오기 -->
	<select id="getEmotion" resultType="java.lang.Integer">
		SELECT ${user.emotion} FROM ${tbl_user} WHERE ${user.uno} = #{uno}
	</select>
	
	<!-- ID로 회원번호 찾기 -->
	<select id="findUnoFromId" resultType="java.lang.Integer">
		SELECT ${user.uno} FROM ${tbl_user}
		WHERE ${user.userid} = #{userId}
	</select>
	
	<!-- 회원번호로 해당 회원 정보 가져오기 -->
	<select id="findUserByUno" resultType="User">
		SELECT ${user.uno}, ${user.userid}, ${user.username},
		${user.useremail}, ${user.birthday}, ${user.graduation},
		${user.bg_photo}, ${user.pf_photo}, ${user.emotion}
		FROM ${tbl_user}
		WHERE ${user.uno} = #{uno}
	</select>
	
	<!-- 이름으로 해당 회원의 정보 목록 찾기 -->
	<select id="findUserByName" resultType="User">
		SELECT ${user.uno}, ${user.userid}, ${user.username},
		${user.useremail}, ${user.birthday}, ${user.graduation},
		${user.bg_photo}, ${user.pf_photo}, ${user.emotion}
		FROM ${tbl_user}
		WHERE INSTR(${user.username}, #{userName}) > 0
	</select>
	
	<!-- 출신학교로 해당 회원의 정보 목록 찾기 -->
	<select id="findUserByGraduation" resultType="User">
		SELECT ${user.uno}, ${user.userid}, ${user.username},
		${user.useremail}, ${user.birthday}, ${user.graduation},
		${user.bg_photo}, ${user.pf_photo}, ${user.emotion}
		FROM ${tbl_user}
		WHERE INSTR(${user.graduation}, #{graduation}) > 0
	</select>
	
	<!-- 이름 + 출신학교로 해당 회원의 정보 목록 찾기 -->
	<select id="findUserByNameAndGraduation" resultType="User">
		SELECT ${user.uno}, ${user.userid}, ${user.username},
		${user.useremail}, ${user.birthday}, ${user.graduation},
		${user.bg_photo}, ${user.pf_photo}, ${user.emotion}
		FROM ${tbl_user}
		WHERE
		INSTR(${user.username}, #{userName}) > 0
		AND
		INSTR(${user.graduation}, #{graduation}) > 0
	</select>
	
	<!-- 출신학교를 통한 추천친구 목록 -->
	<select id="recommendedAllwaisers" resultType="User">
		SELECT ${user.uno}, ${user.userid}, ${user.username}, ${user.pf_photo}
		FROM ${tbl_user}
		WHERE
		INSTR(${user.graduation}, #{graduation}) > 0
		AND
		${user.uno} NOT IN (
			SELECT ${allwaiser.allwaiseruno} FROM ${tbl_allwaiser}
			WHERE ${allwaiser.uno} = #{uno})
		AND ${user.uno} != #{uno}
		ORDER BY ${user.username}
		LIMIT #{start}, 5
	</select>
	
	<!-- ID 찾기 -->
	<select id="findUserId" resultType="java.lang.String">
		SELECT ${user.userid}
		FROM ${tbl_user}
		WHERE
		INSTR(${user.username}, #{userName}) > 0
		AND
		INSTR(${user.useremail}, #{userEmail}) > 0
	</select>
	
	<!-- 비밀번호 찾기 -->
	<select id="findUserPwd" resultType="java.lang.Integer">
		SELECT ${user.uno}
		FROM ${tbl_user}
		WHERE 
		INSTR(${user.username}, #{userName}) > 0
		AND
		INSTR(${user.userid}, #{userId}) > 0
		AND
		INSTR(${user.useremail}, #{userEmail}) > 0
	</select>
	
	<select id="existUserName" resultType="java.lang.Integer">
		SELECT EXISTS(
			SELECT ${user.name} FROM ${tbl_board}
			WHERE ${user.userid} = #{userId}
			AND
			${user.useremail} = #{userEmail}
		) AS isEXIST
	</select>
	
	<!-- 회원가입 -->
	<insert id="registUser">
		INSERT INTO ${tbl_user}
		(${user.userid}, ${user.userpwd}, ${user.username}, 
		${user.useremail}, ${user.birthday}, ${user.graduation})
		VALUES
		(#{userId}, #{userPwd}, #{userName}, #{userEmail}, #{birthDay}, #{graduation})
	</insert>
	
	<!-- 회원정보 수정(비밀번호, Email, 출신학교) -->
	<update id="updateUser">
		UPDATE ${tbl_user} 
		SET ${user.userpwd} = #{userPwd},
		${user.useremail} = #{userEmail},
		${user.graduation} = #{graduation}
		WHERE ${user.uno} = #{uno}
	</update>
	
	<!-- 배경사진 수정 -->
	<update id="registBackground">
		UPDATE ${tbl_user} SET ${user.bg_photo} = #{bg_photo} WHERE ${user.uno} = #{uno}
	</update>
	
	<!-- 프로필 사진 수정 -->
	<update id="registProfile">
		UPDATE ${tbl_user} SET ${user.pf_photo} = #{pf_photo} WHERE ${user.uno} = #{uno}
	</update>
	
	<!-- 나의 감정상태 수정 -->
	<update id="updateEmotion">
		UPDATE ${tbl_user} SET ${user.emotion} = #{emotion} WHERE ${user.uno} = #{uno}
	</update>
	
	<!-- 비밀번호 재설정 -->
	<update id="resetPassword">
		UPDATE ${tbl_user} SET ${user.userpwd} = #{userPwd} WHERE ${user.uno} = #{uno}
	</update>
	
	<!-- 회원탈퇴 -->
	<delete id="quitUser">
		DELETE FROM ${tbl_user}
		WHERE ${user.uno} = #{uno}
	</delete>
</mapper>